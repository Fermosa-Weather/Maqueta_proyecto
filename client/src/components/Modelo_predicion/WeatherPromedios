import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

// Registrar los componentes de Chart.js
ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const WeatherPromedios = () => {
  const [data, setData] = useState(null);
  const [selectedDate, setSelectedDate] = useState('2024-12-04'); // Fecha inicial por defecto

  // Función para obtener los datos de la API
  const fetchData = async (date) => {
    try {
      const response = await axios.get(`http://localhost:3000/api/model/promedios?date=${date}`);
      
      // Formatear los datos según lo requerido
      const formattedData = {
        rango: {
          inicio: response.data.inicio,
          fin: response.data.fin,
        },
        promedios: {
          temperatura: response.data.promedios.temperatura.toFixed(2),
          humedad: response.data.promedios.humedad.toFixed(2),
          lluvia: response.data.promedios.lluvia.toFixed(2),
          velocidadViento: response.data.promedios.velocidadViento.toFixed(2),
          totalRegistros: response.data.promedios.totalRegistros,
        },
      };

      setData(formattedData);  // Guardar los datos formateados
    } catch (error) {
      console.error('Error al obtener los datos', error);
    }
  };

  // Cargar los datos iniciales
  useEffect(() => {
    fetchData(selectedDate);
  }, [selectedDate]); // Refrescar los datos cuando la fecha seleccionada cambie

  // Si no hay datos, mostrar mensaje
  if (!data) {
    return <p>Cargando los datos...</p>;
  }

  // Datos para el gráfico
  const chartData = {
    labels: ['Promedio'],
    datasets: [
      {
        label: 'Temperatura (°C)',
        data: [data.promedios.temperatura],
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1,
      },
      {
        label: 'Humedad (%)',
        data: [data.promedios.humedad],
        backgroundColor: 'rgba(153, 102, 255, 0.5)',
        borderColor: 'rgba(153, 102, 255, 1)',
        borderWidth: 1,
      },
      {
        label: 'Lluvia (mm)',
        data: [data.promedios.lluvia],
        backgroundColor: 'rgba(255, 159, 64, 0.5)',
        borderColor: 'rgba(255, 159, 64, 1)',
        borderWidth: 1,
      },
      {
        label: 'Velocidad del Viento (km/h)',
        data: [data.promedios.velocidadViento],
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
        borderColor: 'rgba(255, 99, 132, 1)',
        borderWidth: 1,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: `Promedios Meteorológicos: ${data.rango.inicio} - ${data.rango.fin}`,
      },
      legend: {
        position: 'top',
      },
    },
    scales: {
      y: {
        beginAtZero: true,
      },
    },
  };

  // Manejar el cambio de fecha
  const handleDateChange = (event) => {
    setSelectedDate(event.target.value); // Actualizar la fecha seleccionada
  };

  return (
    <div>
      <h2>Promedios Meteorológicos</h2>
      {/* Input para seleccionar fecha */}
      <input
        type="date"
        value={selectedDate}
        onChange={handleDateChange}
        max={new Date().toISOString().split('T')[0]} // Solo fechas hasta hoy
      />
      <Bar data={chartData} options={chartOptions} />
    </div>
  );
};

export default WeatherPromedios;
